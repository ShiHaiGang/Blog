#!nginx
# 使用的用户和组
user  www www;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  2;

# 指定 pid 存放的路径
pid /var/run/nginx.pid;

# 全局错误日志 [ debug | info | notice | warn | error | crit ]
error_log  /var/log/nginx.error_log  info;

# Nginx如何控制connection
events {
    # 单个后台进程,允许最大并发链接数
    worker_connections   2000;

    # 工作模式 [ kqueue | epoll | /dev/poll | select | poll ];
    use kqueue;
}
### 一般来说  max clients = worker_processes * worker_connections
### 反向代理  max clients = worker_processes * worker_connections/4

# 核心HTTP Server配置
http {
    # 文件扩展名与文件类型映射表
    include       conf/mime.types;
    # 文件扩展名与文件类型映射表
    default_type  application/octet-stream;

    # 自定义格式 main
    log_format main      '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$gzip_ratio"';
    # 自定义格式 download
    log_format download  '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$http_range" "$sent_http_content_range"';

        # $remote_addr：反向代理服务器地址
        # $remote_user：远程客户端名称
        # [$time_local]：访问时间与时区
        # $request：记录请求的URL和协议
        # $status：记录请求状态
        # $body_bytes_sent：客户端发送body内松大小
        # $http_referer：从哪个页面链接访问而来
        # $http_user_agent：记录client浏览器相关信息
        # $http_x_forwarded_for：记录原有client IP地址和原client请求server IP地址

    # 指定多长时间等待客户端发送一个请求头
    client_header_timeout  3m;
    # 从客户端读取body超时时间
    client_body_timeout    3m;
    # 指定为客户端响应超时时间
    send_timeout           3m;
    # 客户端headerbuffer大小
    client_header_buffer_size    1k;
    # 最大headerbuffer大小
    large_client_header_buffers  4 4k;
    # 开启gzip压缩
    gzip on;
    # Content-Length大于此长度才会被压缩
    gzip_min_length  1100;
    # compress buffer
    gzip_buffers     4 8k;
    # 添加额外压缩类型，默认已包括text/html
    gzip_types       text/plain;

    output_buffers   1 32k;
    postpone_output  1460;

    # sendfile模式，效率更高，直接通过kernel，而不经过用户空间
    sendfile         on;
    # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    # sendfile_max_chunk 100k;
    tcp_nopush       on;
    tcp_nodelay      on;
    send_lowat       12000;
    # 连接超时时间
    keepalive_timeout  75 20;

    #lingering_time     30;
    #lingering_timeout  10;
    #reset_timedout_connection  on;

    # 设定负载均衡的服务器列表
    upstream mysvr {
        # weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.8.1:3128 weight=5;
        server 192.168.8.2:80   weight=1;
        server 192.168.8.3:80   weight=6;
    }

    # 虚拟服务器配置 基于IP和基于域名两种
    server {
        # 监听服务器，地址和端口，默认绑定80端口
        listen        one.example.com;
        # 域名可以有多个，用空格隔开(支持正则表达式)
        server_name   one.example.com  www.one.example.com;
        # 日志格式, log_format main
        access_log   /var/log/nginx.access_log  main;

        # 根据URL进行不同配置
        location / {

                    # ~区分大小写
                    # ~*不区分大小写
                    # / 匹配所有
                    # =精确匹配，停止搜索其他location
                    # ^~匹配时，停止搜索其他location
                    ######################location匹配优先级########################
                    # = 精确匹配会第一个被处理。如果发现精确匹配，nginx停止搜索其他匹配。
                    # 普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有没有正则表达式匹配和更长的匹配。
                    # ^~ 则只匹配该规则，nginx停止搜索其他匹配，否则nginx会继续处理其他location指令。
                    # 最后匹配理带有"~"和"~*"的指令，如果找到相应的匹配，则nginx停止搜索其他匹配；当没有正则表达式或者没有正则表达式被匹配的情况下，那么匹配程度最高的逐字匹配指令会被使用。

            # 代理服务器地址和URL映射
            proxy_pass         http://127.0.0.1/;
            # 在响应头更新Location和Refresh在代理服务器
            proxy_redirect     off;

            # 后端的Web服务器可以通过Host获取用户真实Host
            proxy_set_header   Host             $host;
            # 后端的Web服务器可以通过X-Real-IP获取用户真实remote_addr
            proxy_set_header   X-Real-IP        $remote_addr;
            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            # proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;

            # 允许客户端请求的最大单文件字节数
            client_max_body_size       10m;
            # 缓冲区代理缓冲用户端请求的最大字节数
            client_body_buffer_size    128k;

            # 缓冲临时写入文件
            client_body_temp_path      /var/nginx/client_body_temp;

            # nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout      70;
            # 后端服务器数据回传时间(代理发送超时)
            proxy_send_timeout         90;
            # 连接成功后，后端服务器响应时间(代理接收超时)
            proxy_read_timeout         90;
            proxy_send_lowat           12000;

            # 设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffer_size          4k;
            # proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_buffers              4 32k;
            # 高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size    64k;
            # 设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k;

            # 为存储承载从代理服务器接收到的数据的临时文件定义目录。指定目录下支持3级子目录结构
            proxy_temp_path            /var/nginx/proxy_temp;

            # 默认编码
            charset utf-8; 
        }
        # 定义错误提示页面
        error_page  404  /404.html;

        location = /404.html {
            root  /spool/www;
        }

        location /old_stuff/ {
            rewrite   ^/old_stuff/(.*)$  /new_stuff/$1  permanent;
        }

        location /download/ {

            valid_referers  none  blocked  server_names  *.example.com;

            if ($invalid_referer) {
                #rewrite   ^/   http://www.example.com/;
                return   403;
            }

            #rewrite_log  on;

            # rewrite /download/*/mp3/*.any_ext to /download/*/mp3/*.mp3
            rewrite ^/(download/.*)/mp3/(.*)\..*$
                    /$1/mp3/$2.mp3                   break;

            root         /spool/www;
            #autoindex    on;
            access_log   /var/log/nginx-download.access_log  download;
        }
        # 静态文件，nginx自己处理
        # location ~ ^/(images|javascript|js|css|flash|media|static)/
        location ~* \.(jpg|jpeg|gif)$ {
            root         /spool/www;
            access_log   off;
            # 过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。
            expires      30d;
        }
    }
}